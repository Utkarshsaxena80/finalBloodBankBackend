// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"

}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
model BloodBank {
  id                 String   @id @default(cuid())
  name               String
  address            String
  state              String
  pincode            String
  contactMobile      String   @unique
  email              String   @unique
  contactPerson      String
  registrationNo     String   @unique
  gstNo              String?
  bankAccountDetails String
  bankName           String
  ifsc               String
  upiId              String?

  // Relation: A BloodBank can have many Admins
  admins             Admin[]
  
   ownedGroups        BloodBankGroup[] @relation("GroupOwner")
  memberships        GroupMember[]

  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
   sentRequests GroupJoinRequest[] @relation("Requester")
}

model Admin {
  id            String   @id @default(cuid())
  name          String
  designation   String
  contactMobile String   @unique
  email         String   @unique
  password      String   // You MUST store a hashed password here

  // Relation: Each Admin belongs to one BloodBank
  bloodBankId   String
  bloodBank     BloodBank @relation(fields: [bloodBankId], references: [id])

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model OTP {
  id        String   @id @default(cuid())
  otp       String
  identifier String  @unique // This can be an email or phone number
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BloodBankGroup {
  id          String      @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  ownerId     String
  owner       BloodBank   @relation("GroupOwner", fields: [ownerId], references: [id])
   
    joinRequests GroupJoinRequest[]
  members     GroupMember[]
}

// This table connects BloodBanks and BloodBankGroups (many-to-many relationship)
model GroupMember {
  id               String         @id @default(cuid())
  joinedAt         DateTime       @default(now())

  bloodBankId      String
  bloodBankGroupId String

  bloodBank        BloodBank      @relation(fields: [bloodBankId], references: [id])
  bloodBankGroup   BloodBankGroup @relation(fields: [bloodBankGroupId], references: [id])

  @@unique([bloodBankId, bloodBankGroupId])
}
// Model to track requests to join a group
model GroupJoinRequest {
  id        String   @id @default(cuid())
  status    String   @default("PENDING") // PENDING, APPROVED, DENIED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation: The BloodBank that sent the request
  requesterId String
  requester   BloodBank @relation("Requester", fields: [requesterId], references: [id])

  // Relation: The group they want to join
  groupId     String
  group       BloodBankGroup @relation(fields: [groupId], references: [id])

  // Prevents sending duplicate requests
  @@unique([requesterId, groupId])
}